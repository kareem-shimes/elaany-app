// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// User and E-commerce models
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
  ads      Ad[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  image       String?
  icon        String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subcategories SubCategory[]
  ads           Ad[]

  @@map("categories")
}

model SubCategory {
  id         String   @id @default(cuid())
  name       String
  slug       String
  categoryId String
  count      Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  ads      Ad[]

  @@unique([slug, categoryId])
  @@map("subcategories")
}

model Ad {
  id            Int         @id @default(autoincrement())
  title         String
  description   String      @db.Text
  price         Float
  currency      String      @default("USD")
  location      String
  categoryId    String
  subcategoryId String?
  image         String?
  images        String[]    @default([])
  postedDate    DateTime    @default(now())
  sellerId      String
  featured      Boolean     @default(false)
  condition     AdCondition @default(USED)
  views         Int         @default(0)
  isNegotiable  Boolean     @default(false)
  phone         String?
  status        AdStatus    @default(ACTIVE)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  seller      User         @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  category    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subcategory SubCategory? @relation(fields: [subcategoryId], references: [id], onDelete: SetNull)

  @@map("ads")
}

// Enums
enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum AdCondition {
  NEW
  USED
  REFURBISHED
}

enum AdStatus {
  ACTIVE
  INACTIVE
  SOLD
  EXPIRED
}
